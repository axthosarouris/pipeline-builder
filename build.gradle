plugins {
    id 'java'
    id 'base'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "5.2.1"
}

dependencies {
    compile project(":service")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'base'
    apply plugin: 'jacoco'
    repositories {
        jcenter()
    }
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'

    dependencies {
        //libraries for testing
        testImplementation('org.hamcrest:java-hamcrest:2.0.0.0')
        testImplementation('org.mockito:mockito-core:2.27.0')
        testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')
        testImplementation('org.junit.jupiter:junit-jupiter-params:5.3.2')
        testImplementation('org.junit.jupiter:junit-jupiter-engine:5.3.2')
    }
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        failFast = true
    }

    checkstyle {
        configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
        showViolations = true
        toolVersion '8.13'
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
        }
    }

    pmd {
        toolVersion = "6.7.0"
        ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
        ruleSets = []
        ignoreFailures = false
    }

    shadowJar {
        archiveName = "${baseName}-fat.jar"
        exclude('org.apache.tomcat.embed:*')
    }
    
    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/reports/jacoco")
        }
    }

    jacoco {
        toolVersion = "0.8.3"
    }


    check.dependsOn jacocoTestCoverageVerification
    jacocoTestCoverageVerification.dependsOn(jacocoTestReport)
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    counter = 'METHOD'
                    value = 'COVEREDRATIO'
                    minimum = 0.80
                    List<String> excludeList = [
                            '*.CodePipelineCommunicator*',
                            '*ResourceHandler*',
                            '*InitHandler*',
                            '*DestroyHandler*',
                            '*StackWiper*',
                            '*StackBuilder*'

                    ]
                    excludes += (excludeList)
                }
            }

            rule {
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 0.80
                    List<String> excludeList = [
                            '*CodePipelineCommunicator*',
                            '*ResourceHandler*',
                            '*InitHandler*',
                            '*DestroyHandler*',
                            '*StackWiper*',
                            '*StackBuilder*'
                    ]
                    excludes += (excludeList)
                }
            }

        }
    }


}









